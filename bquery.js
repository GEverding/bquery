// Generated by CoffeeScript 1.3.3
(function() {
  var bQuery, bQueryView;

  bQueryView = (function() {

    function bQueryView(opts) {
      if (opts == null) {
        opts = {};
      }
      bQueryView = function() {};
      this._events = [];
      this._properties = [];
      this._init = [];
      this._view = opts.view || Backbone.View.extend(bQueryView);
    }

    bQueryView.prototype.init = function(f) {
      this._init.push(f);
      return this;
    };

    bQueryView.prototype.on = function(e, f) {
      this._events.push({
        name: e,
        fn: f
      });
      return this;
    };

    bQueryView.prototype.set = function(p, v) {
      this._properties.push({
        name: p,
        value: v
      });
      return this;
    };

    bQueryView.prototype.use = function(p) {
      p(this, this.view);
      return this;
    };

    bQueryView.prototype.view = function() {
      return this._view;
    };

    bQueryView.prototype.make = function(v) {
      var name, t, value, _i, _len, _ref, _ref1,
        _this = this;
      v = v || this.view();
      v.prototype.events = function() {
        var evts, fn, fns, groupedEvents, k, name;
        evts = {};
        groupedEvents = _.groupBy(_this._events, function(e) {
          return e.name;
        });
        for (k in groupedEvents) {
          v = groupedEvents[k];
          name = k;
          fns = v;
          if (v.length > 1) {
            evts[k] = function() {
              var fn, _i, _len;
              for (_i = 0, _len = fns.length; _i < _len; _i++) {
                fn = fns[_i].fn;
                fn.apply(this, [].slice(arguments));
              }
            };
          } else {
            fn = fns[0].fn;
            evts[k] = fn;
          }
        }
        return evts;
      };
      _ref = this._properties;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], name = _ref1.name, value = _ref1.value;
        v.prototype[name] = value;
      }
      t = this;
      v.prototype.initialize = function(opts) {
        var i, _j, _len1, _ref2;
        if (opts == null) {
          opts = {};
        }
        _ref2 = t._init;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          i = _ref2[_j];
          i.call(this, opts);
        }
      };
      return v;
    };

    return bQueryView;

  })();

  bQuery = (function() {

    function bQuery() {}

    bQuery.view = function() {
      return new bqView;
    };

    return bQuery;

  })();

}).call(this);
